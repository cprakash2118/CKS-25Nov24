#Quick Recap-
- Lab Access (CentOS 9 - master/worker )
- Product - Kubernetes (k8s).
   https://kubernetes.io/
   https://kubernetes.io/docs/home/
- Containerization
  1) Managed containers via COntainer Engine [podman/docker/rocket/conatinerd/crio etc ]
  2) Managed Containers via COntainer Orcherations tool like kubernetes (k8s).
  
- Operations w.r.t conatiners via conatiner Engine (podman).
- Container Orcherations (Container Run Time env - conatinerd/crio).
- Kubernetes Cluster (k8s cluster).
  master node - Kubernetes services running [3 node master, as per our lab - 1 master]
  worker node - End user applications running (And using kubernetes serviecs)
  FYI- Kubernetes services -> Containerized services.
- Build new k8s cluster.
  1 master node 
  2 worker nodes 
  3 base machine [Centos 9], KVM-QEMU virtualization, consider each VM as bare metal node.
  4 Using "kubeadm" interface to deploy k8s cluster.
    https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
	
- k8s cluster Pre-requisite 

################################# k8s cluster installation #################################
#Step1-
*************************
- Login to Base machine as root account and perform some basic Pre-requisites.
  # hostnamectl set-hostname base01.lab.example.com 
  # vim /etc/hosts
  ..
  ..
  # Append base and k8s cluster nodes enteries.
  172.16.12.158   base01.lab.example.com   base01 
  
###
Step2:-Add Kernel Modules
*************************

To load the necessary kernel modules required by Kubernetes, you can use the modprobe command followed by the module names (on each node).

modprobe br_netfilter
modprobe ip_vs
modprobe ip_vs_rr
modprobe ip_vs_wrr
modprobe ip_vs_sh
modprobe overlay

lsmod | egrep 'br_netfilter|ip_vs|ip_vs_rr|ip_vs_sh|ip_vs_wrr|overlay'

  cat > /etc/sysctl.d/kubernetes.conf << EOF
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

sysctl --system

  

###
Step3#
*************************

sudo swapoff -a
 sed -e '/swap/s/^/#/g' -i /etc/fstab
 cat /etc/fstab
 sudo swapoff -a
 sed -e '/swap/s/^/#/g' -i /etc/fstab
 cat /etc/fstab
  
  
  
 Step4#
*************************
 
 sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
 sudo dnf makecache
 sudo dnf -y install containerd.io
 
 [Explaination- This are default "COntainer Run Time" changes, and we are going to enable only "SystemdCgroup = true" ]
 
 sudo sh -c "containerd config default > /etc/containerd/config.toml" ; cat /etc/containerd/config.toml

Using your preferred text editor, open the /etc/containerd/config.toml file and set the SystemdCgroup variable to true (SystemdCgroup = true):
SystemdCgroup = true

systemctl enable --now containerd.service 

sudo systemctl reboot
sudo systemctl status containerd.service

# vim /etc/crictl.yaml
runtime-endpoint: unix:///run/containerd/containerd.sock

Note: Providing "Container RUN time - sock path to kubernetes for  communication"
kubelet -> containerd 
 

 Step5#
*************************
cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key
exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
EOF


dnf makecache; dnf install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
systemctl enable --now kubelet.service


NOte: Till here all above steps on all the nodes [master/worker]

#########################################################
Step6#  (Below Only on master node)
sudo kubeadm config images pull
Note: Pull all required images.

sudo kubeadm init --pod-network-cidr=10.244.0.0/16

Note: It will create all resource manifests "location - /etc/kubernetes/*"

FYI- After successfull installation of k8s, execute the below command (why? - To login to k8s cluster using certificate).

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config


- To enable DNS/POD-Network part.
kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/tigera-operator.yaml

wget https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/custom-resources.yaml

sed -i 's/cidr: 192\.168\.0\.0\/16/cidr: 10.244.0.0\/16/g' custom-resources.yaml

kubectl create -f custom-resources.yaml

sudo kubeadm token create --print-join-command

*****************
https://github.com/projectcalico/calico/blob/master/manifests/calico.yaml
*****************


